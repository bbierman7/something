{"version":3,"sources":["components/Card/Card.js","components/Grid/Grid.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","concat","finish","id","onClick","handleCardClick","src","image","alt","Grid","shake","children","Nav","style","color","href","score","topScore","App","state","sports","doubleClick","update","Object","toConsumableArray","_this","forEach","sport","clicked","length","sort","Math","random","setState","_this2","this","components_Nav_Nav","components_Grid_Grid","map","components_Card_Card","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i1DAUeA,eANF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,QAAAC,OAAYL,EAAMM,OAAS,UAAU,IAAMC,GAAMP,EAAMO,GAAIC,QAAWR,EAAMS,iBAC1FR,EAAAC,EAAAC,cAAA,OAAKC,UAAY,WAAWM,IAAOV,EAAMW,MAAOC,IAAM,cCI3CC,SANF,SAAAb,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,aAAAC,OAAiBL,EAAMc,MAAQ,SAAS,KACrDd,EAAMe,YCWIC,SAbH,SAAAhB,GAAK,OACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,MAAIc,MAAO,CAACC,MAAM,UAAlB,eAEAjB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAhB,sCACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,4BACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAWe,KAAK,MAAhC,SAA4CnB,EAAMoB,MAAlD,iBAAuEpB,EAAMqB,sBC+D1EC,6MA/DjBC,MAAQ,CACNC,SACAJ,MAAM,EACNC,SAAS,KAGXZ,gBAAkB,SAAAF,GAChB,IAAIkB,GAAc,EAEdC,EAAS,CACXF,OAAOG,OAAAC,EAAA,EAAAD,CAAME,EAAKN,MAAMC,QACxBJ,MAAOS,EAAKN,MAAMH,MAClBC,SAAUQ,EAAKN,MAAMF,UAGvBK,EAAOF,OAAOM,QAAQ,SAAAC,GAChBA,EAAMxB,KAAOA,IACXwB,EAAMC,QACNP,GAAc,GAEhBM,EAAMC,SAAU,EAChBN,EAAON,QACJM,EAAON,MAAQM,EAAOL,WACvBK,EAAOL,SAAWK,EAAON,WAO9BK,IACDC,EAAOF,OAAOM,QAAQ,SAAAC,GAAK,OAAIA,EAAMC,SAAU,IAC/CN,EAAON,MAAQ,IAGdM,EAAON,OAAWM,EAAON,MAAQM,EAAOF,OAAOS,QAChDP,EAAOF,OAAOM,QAAQ,SAAAC,GAAK,OAAIA,EAAMC,SAAU,IAGjDN,EAAOF,OAASE,EAAOF,OAAOU,KAAK,iBAAM,GAAMC,KAAKC,WAEpDP,EAAKQ,SAAS,CAACb,OAAQE,EAAOF,OAAQJ,MAAOM,EAAON,MAAOC,SAAUK,EAAOL,oFAErE,IAAAiB,EAAAC,KACP,OACEtC,EAAAC,EAAAC,cAAA,WACMF,EAAAC,EAAAC,cAACqC,EAAD,CAAKpB,MAAOmB,KAAKhB,MAAMH,MAAOC,SAAUkB,KAAKhB,MAAMF,WACnDpB,EAAAC,EAAAC,cAACsC,EAAD,CAAM3B,OAAQyB,KAAKhB,MAAMH,OAASmB,KAAKhB,MAAMF,UAC1CkB,KAAKhB,MAAMC,OAAOkB,IAAI,SAAAX,GAAK,OAC1B9B,EAAAC,EAAAC,cAACwC,EAAD,CACEC,IAAKb,EAAMxB,GACXA,GAAIwB,EAAMxB,GACVD,OAAQgC,EAAKf,MAAMH,SAAWkB,EAAKf,MAAMH,MAAQkB,EAAKf,MAAMC,OAAOS,QACnEtB,MAAOoB,EAAMpB,MACbF,gBAAiB,kBAAI6B,EAAK7B,gBAAgBsB,EAAMxB,kBAzDhDsC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1fc28a58.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => (\r\n    <div className = {`card ${props.finish ? \" finish\":\"\"}`} id = {props.id} onClick = {props.handleCardClick}>\r\n    <img className = \"card-img\" src = {props.image} alt = \"sports\"/>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nimport \"./Grid.css\";\r\n\r\nconst Grid = props => (\r\n    <div className = {`container ${props.shake ? \" shake\":\"\"}`}>\r\n    {props.children}\r\n    </div>\r\n);\r\n\r\nexport default Grid;","import React from \"react\";\r\n\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = props => (\r\n    <nav className=\"navbar navbar-dark bg-dark\">\r\n        <h2 style={{color:\"white\"}}>Clicky Game</h2>\r\n\r\n        <span className=\"navbar-text\">Click all images only once to win!</span>\r\n        <ul className=\"nav text-white nav-fills\">\r\n            <li className=\"nav-item\">\r\n                <span className=\"nav-link\" href=\"#!\">Score {props.score} || Top Score {props.topScore}</span>\r\n            </li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default Nav;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Card from \"./components/Card\";\r\nimport Grid from \"./components/Grid\";\r\nimport Nav from \"./components/Nav\";\r\nimport sports from \"./sports.json\"\r\n// import { isUpdateExpression } from '@babel/types';\r\n\r\nclass App extends Component {\r\n  // Setting this.state.sports to the sports json array\r\n\r\n  state = {\r\n    sports,\r\n    score:0,\r\n    topScore:0\r\n  }\r\n  \r\n  handleCardClick = id => {\r\n    let doubleClick = false;\r\n\r\n    let update = {\r\n      sports: [ ...this.state.sports],\r\n      score: this.state.score,\r\n      topScore: this.state.topScore\r\n    }\r\n\r\n    update.sports.forEach(sport => {\r\n      if (sport.id === id){\r\n        if (sport.clicked){\r\n            doubleClick = true;\r\n        } else {\r\n          sport.clicked = true;\r\n          update.score++;\r\n          if(update.score > update.topScore){\r\n            update.topScore = update.score;\r\n          }\r\n        }\r\n\r\n      }\r\n    })\r\n\r\n    if(doubleClick){\r\n      update.sports.forEach(sport => sport.clicked = false);\r\n      update.score = 0;\r\n    };\r\n\r\n    if(update.score && !(update.score % update.sports.length)){\r\n      update.sports.forEach(sport => sport.clicked = false);\r\n    };\r\n\r\n    update.sports = update.sports.sort(() => 0.5 - Math.random());\r\n\r\n    this.setState({sports: update.sports, score: update.score, topScore: update.topScore});\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n            <Nav score={this.state.score} topScore={this.state.topScore}/>\r\n            <Grid shake={!this.state.score && this.state.topScore}>\r\n              {this.state.sports.map(sport => (\r\n                <Card \r\n                  key={sport.id}\r\n                  id={sport.id}\r\n                  finish={this.state.score && !(this.state.score % this.state.sports.length)}\r\n                  image={sport.image}\r\n                  handleCardClick={()=>this.handleCardClick(sport.id)}\r\n                />\r\n              ))}\r\n            </Grid>\r\n      </div>\r\n        )\r\n      }\r\n    }\r\n    \r\n    export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}